{"version":3,"sources":["redux/actions.tsx","redux/types.tsx","navigation/LogInNavigator.tsx","components/TaskList/AddTask.tsx","components/TaskList/TaskList.tsx","navigation/ContentNavigator.tsx","navigation/index.tsx","redux/reducers.tsx","redux/store.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","constants/FirebaseCredentials.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["sessionActions","signIn","payload","type","signOut","LogInNavigator","handleLostPassword","console","error","validationSchema","Yup","shape","email","required","password","matches","style","alignContent","justifyContent","alignItems","backgroundColor","height","borderRadius","paddingVertical","paddingHorizontal","textAlign","category","initialValues","onSubmit","values","actions","auth","createUserWithEmailAndPassword","catch","signInWithEmailAndPassword","setErrors","general","message","initialErrors","this","handleChange","handleBlur","handleSubmit","errors","touched","isValid","marginVertical","View","padding","KeyboardAvoidingView","behavior","keyboardType","autoCapitalize","label","autoCorrect","autoCompleteType","placeholder","value","onBlur","onChangeText","secureTextEntry","color","disabled","onPress","appearance","Component","connect","state","dispatch","user","addIcon","props","name","title","tags","optional","AddTask","handleSend","sendable","split","created","Date","now","isDone","log","firebase","ref","currentUser","uid","push","navigation","goBack","width","borderTopLeftRadius","borderTopRightRadius","Platform","OS","minHeight","maxHeight","level","margin","accessoryLeft","status","TaskList","asyncSetBacklog","backlog","database","userUID","on","snap","updateTasks","once","then","snapshot","data","val","setState","Object","entries","map","obj","content","id","checked","key","onChange","set","onLongPress","remove","taskBullet","Dimensions","get","showTasks","navigate","userInfo","nav","createStackNavigator","ContentNavigator","Navigator","screenOptions","headerShown","Screen","component","Stack","LoginNavigator","index","onAuthStateChanged","isLogged","NavigationContainer","theme","colorScheme","DarkTheme","DefaultTheme","RootNavigator","React","bindActionCreators","userInitialState","reducers","combineReducers","action","store","createStore","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","Ionicons","font","require","warn","useCachedResources","icons","EvaIconsPack","eva","StatusBar","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","setPersistence","Auth","Persistence","LOCAL","module","exports"],"mappings":"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","file":"static/js/app.86ba95fa.chunk.js","sourcesContent":["import { SIGN_IN, SIGN_OUT } from \"./types\";\n\nfunction signIn(payload:Object) {\n    return {\n        type: SIGN_IN,\n        payload: payload,\n    }\n}\n\nfunction signOut() {\n    return {\n        type: SIGN_OUT,\n    }\n}\n\nconst sessionActions = {\n    signIn,\n    signOut,\n}\n\nexport {sessionActions};\n\n","const SIGN_IN = 'SIGN_IN';\nconst SIGN_OUT = 'SIGN_OUT';\n\nexport {SIGN_IN, SIGN_OUT};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { sessionActions } from \"../redux/actions\";\nimport { Button, Divider, Input, Layout, Text } from \"@ui-kitten/components\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { KeyboardAvoidingView, View } from \"react-native\";\nimport { auth } from \"firebase\";\n\nexport class LogInNavigator extends Component {\n  handleLostPassword = () => {\n    console.error(\"Password forgotten, oh no :C\");\n  };\n\n  validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Invalid email\")\n      .required(\"You need to put an email to access your Vault\"),\n    password: Yup.string()\n      .required(\"You need the password to your Vault\")\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n        \"A lowercase, uppercase, number and a special character and 8+ characters\"\n      ),\n  });\n\n  render() {\n    return (\n      <Layout\n        style={{\n          alignContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          backgroundColor: \"#EF6969\",\n          height: \"100%\",\n        }}\n      >\n        <Layout\n          style={{\n            borderRadius: 20,\n            paddingVertical: \"2%\",\n            paddingHorizontal: \"4%\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Layout>\n            <Text style={{ textAlign: \"center\" }} category=\"h1\">\n              Welcome to your digital backlog!\n            </Text>\n            <Divider />\n          </Layout>\n\n          <Formik\n            initialValues={{\n              email: \"\",\n              password: \"\",\n            }}\n            onSubmit={(values, actions) => {\n              auth()\n                .createUserWithEmailAndPassword(values.email, values.password)\n                .catch((error) => {\n                  auth()\n                    .signInWithEmailAndPassword(values.email, values.password)\n                    .catch((error) => {\n                      actions.setErrors({ general: error.message });\n                    });\n                });\n            }}\n            initialErrors={{\n              email: \"\",\n              password: \"\",\n              general: \"\",\n            }}\n            validationSchema={this.validationSchema}\n          >\n            {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n              isValid,\n            }) => (\n              <Layout\n                style={{ justifyContent: \"space-around\", marginVertical: \"2%\" }}\n              >\n                <View\n                  style={\n                    errors.general\n                      ? {\n                          backgroundColor: \"#EF6969\",\n                          borderRadius: 20,\n                          padding: \"2%\",\n                        }\n                      : { borderRadius: 20, padding: \"2%\" }\n                  }\n                >\n                  <KeyboardAvoidingView\n                  behavior='padding'\n                    style={\n                      errors.email && touched.email\n                        ? {\n                            backgroundColor: \"#EF6969\",\n                            borderRadius: 20,\n                            padding: \"2%\",\n                          }\n                        : { borderRadius: 20, padding: \"2%\" }\n                    }\n                  >\n                    <Input\n                      keyboardType=\"email-address\"\n                      autoCapitalize='none'\n                      label=\"email\"\n                      autoCorrect={false}\n                      autoCompleteType='email'\n                      placeholder=\"email@example.com\"\n                      value={values.email}\n                      onBlur={handleBlur(\"email\")}\n                      onChangeText={handleChange(\"email\")}\n                    ></Input>\n                    <Text>\n                      {errors.email && touched.email ? errors.email : \"\"}\n                    </Text>\n                  </KeyboardAvoidingView>\n                  <KeyboardAvoidingView\n                  behavior='padding'\n                    style={\n                      errors.password && touched.password\n                        ? {\n                            backgroundColor: \"#EF6969\",\n                            borderRadius: 20,\n                            padding: \"2%\",\n                          }\n                        : { borderRadius: 20, padding: \"2%\" }\n                    }\n                  >\n                    <Input\n                      keyboardType=\"default\"\n                      label=\"password\"\n                      autoCapitalize='none'\n                      autoCorrect={false}\n                      autoCompleteType='password'\n                      placeholder=\"Password\"\n                      value={values.password}\n                      onBlur={handleBlur(\"password\")}\n                      secureTextEntry={true}\n                      onChangeText={handleChange(\"password\")}\n                    ></Input>\n\n                    <Text>\n                      {errors.password && touched.password\n                        ? errors.password\n                        : \"\"}\n                    </Text>\n                  </KeyboardAvoidingView>\n\n                  {errors.general ? (\n                    <Text style={{ textAlign: \"center\", color: \"white\" }}>\n                      {errors.general}\n                    </Text>\n                  ) : null}\n                </View>\n\n                <View style={{ padding: \"2%\", alignItems: \"center\" }}>\n                  <Button disabled={!isValid} onPress={handleSubmit}>\n                    Access the vault!\n                  </Button>\n                  <Button\n                    style={{ marginVertical: \"5%\" }}\n                    disabled={!isValid}\n                    appearance=\"outline\"\n                    onPress={handleSubmit}\n                  >\n                    Sign Up for a Vault!\n                  </Button>\n                  <Button\n                    appearance=\"ghost\"\n                    onPress={() => this.handleLostPassword()}\n                  >\n                    Forgot your password?\n                  </Button>\n                </View>\n              </Layout>\n            )}\n          </Formik>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (user) => dispatch(sessionActions.signIn(user)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInNavigator);\n","import {\n  Button,\n  Icon,\n  Input,\n  Layout,\n  Text,\n} from \"@ui-kitten/components\";\nimport { Formik } from \"formik\";\nimport React, { Component } from \"react\";\nimport { Platform } from \"react-native\";\nimport * as firebase from \"firebase\";\nimport * as Yup from \"yup\";\n\n\nconst addIcon = (props) => <Icon {...props} name=\"plus-circle-outline\" />;\n\nconst validationSchema = Yup.object().shape({\n    title: Yup.string()\n      .required(\"What do you want to store?\"),\n    tags: Yup.string().optional(),\n  });\n\n\n\nexport default class AddTask extends Component {\n\n  handleSend = (values: Object, actions:Object) => {\n\n\n    let sendable = {\n        title: values.title,\n        tags: values.tags.split(','),\n        created: Date.now(),\n        isDone: false,\n    }\n    console.log(sendable);\n    firebase.database().ref(firebase.auth().currentUser?.uid + '/reminders').push(sendable);\n    this.props.navigation.goBack();\n    \n}\n\n  render() {\n    return (\n      <Layout\n        style={{\n          backgroundColor: \"#EF6969\",\n          width: \"100%\",\n          height: \"100%\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <Text category=\"h1\" style={{ paddingVertical: \"2%\" }}>\n          Create a entry\n        </Text>\n        <Layout\n          style={{\n            borderTopLeftRadius: 20,\n            borderTopRightRadius: 20,\n            width: Platform.OS === \"web\" ? \"50%\" : \"100%\",\n            minHeight: \"80%\",\n            maxHeight: \"90%\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n          level=\"1\"\n        >\n          <Layout\n            level=\"2\"\n            style={{\n              borderRadius: 20,\n              margin: 20,\n              padding: 20,\n              height: \"95%\",\n              width: \"90%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Formik\n              initialValues={{\n                title: \"\",\n                tags:\"\",\n              }}\n              initialErrors={{\n                  title:'',\n                  tags:'',\n              }}\n              onSubmit={this.handleSend}\n                validationSchema={validationSchema}\n            >\n              {({\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                values,\n                errors,\n                touched,\n                isValid,\n              }) => (\n                <Layout\n                  level=\"2\"\n                  style={{\n                    width: Platform.OS === 'web' ? '90%' : '100%',\n                    height: \"100%\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <Layout level='3' style={{padding: 20, borderRadius:20, height:'25%', justifyContent:'space-around'}}>\n                      <Text category='h6' style={{textAlign:'center'}}>Provide some detail</Text>\n                    <Input\n                      keyboardType=\"default\"\n                      label=\"Title\"\n                      autoCapitalize=\"sentences\"\n                      autoCorrect={true}\n                      placeholder=\"Drop the line!\"\n                      onBlur={handleBlur(\"title\")}\n                      onChangeText={handleChange(\"title\")}\n                    ></Input>\n\n\n                    <Input\n                      keyboardType=\"default\"\n                      label=\"Tags\"\n                      autoCapitalize=\"words\"\n                      autoCorrect={true}\n                      placeholder=\"Write concepts related to the task, separated by ','\"\n                      onBlur={handleBlur(\"tags\")}\n                      onChangeText={handleChange(\"tags\")}\n                    ></Input>\n                    \n                  </Layout>\n                  <Layout\n                    level=\"2\"\n                    style={{\n                      width: \"90%\",\n                      borderRadius: 20,\n                      padding: 20,\n                      margin: 20,\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <Button accessoryLeft={addIcon} status='primary' disabled={!isValid} onPress={handleSubmit}>\n                      Add it to the vault!\n                    </Button>\n                    <Button\n                      appearance=\"ghost\"\n                      style={{ width: \"100%\" }}\n                      status=\"danger\"\n                      onPress={() => {\n                        this.props.navigation.goBack();\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </Layout>\n                </Layout>\n              )}\n            </Formik>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  Divider,\n  Icon,\n  Layout,\n  Radio,\n  Text,\n} from \"@ui-kitten/components\";\n\nimport { database } from \"firebase/app\";\nimport { auth } from \"firebase/app\";\n\nimport { Dimensions, Platform } from \"react-native\";\n\nconst addIcon = (props) => <Icon {...props} name=\"plus-circle-outline\" />;\n\nfunction taskBullet(props: Object) {\n  let content = props[1];\n  let id = props[0];\n  return (\n    <Radio\n      checked={content.isDone}\n      style={{ marginVertical: 2 }}\n      key={content.title}\n      onChange={() => {\n        database()\n          .ref(auth().currentUser?.uid + \"/reminders/\" + id + \"/isDone\")\n          .set(!content.isDone);\n      }}\n      onPress={() => {}}\n      onLongPress={() => {\n        database()\n          .ref(auth().currentUser?.uid + \"/reminders/\" + id)\n          .remove();\n      }}\n    >\n      {content.title}\n    </Radio>\n  );\n}\n\nexport class TaskList extends Component {\n  async asyncSetBacklog() {\n    let data = await database()\n      .ref(this.props.userUID + \"/reminders\")\n      .once(\"value\")\n      .then(function (snapshot) {\n        return snapshot;\n      });\n\n    this.updateTasks(data);\n  }\n\n  updateTasks(val) {\n    this.setState({ ...this.state, backlog: val.val() });\n  }\n\n  constructor(props) {\n    super(props);\n    this.asyncSetBacklog();\n    this.state = { backlog: {} };\n\n    database()\n      .ref(this.props.userUID + \"/reminders\")\n      .on(\"value\", (snap) => this.updateTasks(snap));\n  }\n\n  showTasks() {\n    if (this.state.backlog) {\n      let attempt = Object.entries(this.state.backlog);\n\n      let ans = attempt.map(function (obj: Object) {\n        return taskBullet(obj);\n      });\n\n      return ans;\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <Layout\n        style={{\n          backgroundColor: \"#EF6969\",\n          width: \"100%\",\n          height: \"100%\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <Text category=\"h1\" style={{ paddingVertical: \"2%\" }}>\n          Digital backlog\n        </Text>\n        <Layout\n          style={{\n            borderTopLeftRadius: 20,\n            borderTopRightRadius: 20,\n            width:\n              Platform.OS === \"web\" && Dimensions.get(\"screen\").width > 500\n                ? \"50%\"\n                : \"100%\",\n            minHeight: \"80%\",\n            maxHeight: \"90%\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n          level=\"1\"\n        >\n          <Layout\n            level=\"2\"\n            style={{\n              borderRadius: 20,\n              margin: 20,\n              padding: 20,\n              height: \"50%\",\n              width: \"90%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Text category=\"h2\">Last time</Text>\n            <Divider />\n            <Layout\n              level=\"3\"\n              style={{\n                height: \"90%\",\n                width: \"99%\",\n                borderRadius: 20,\n                padding: 20,\n              }}\n            >\n              {this.showTasks()}\n            </Layout>\n          </Layout>\n\n          <Layout\n            level=\"2\"\n            style={{\n              width: \"90%\",\n              borderRadius: 20,\n              padding: 20,\n              margin: 20,\n              alignItems: \"center\",\n            }}\n          >\n            <Button\n              appearance=\"ghost\"\n              style={{ width: \"100%\" }}\n              accessoryLeft={addIcon}\n              onPress={() => {\n                this.props.navigation.navigate(\"Add Task\");\n              }}\n            >\n              Add a reminder\n            </Button>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userUID: state.user.userInfo.uid,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\n","import { createStackNavigator } from '@react-navigation/stack'\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\nimport AddTask from '../components/TaskList/AddTask';\nimport TaskList from '../components/TaskList/TaskList';\n\nconst nav = createStackNavigator();\n\nexport default class ContentNavigator extends Component {\n  render() {\n    return (\n      <nav.Navigator screenOptions={{headerShown:false}}>\n        <nav.Screen name='List' component={TaskList}/>\n        <nav.Screen name='Add Task' component={AddTask}/>\n      </nav.Navigator>\n    )\n  }\n}\n","import {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport * as React from \"react\";\n\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport { RootStackParamList } from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction LoginNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={LogInNavigator} />\n    </Stack.Navigator>\n  );\n}\n\nimport { connect } from \"react-redux\";\nimport { auth } from \"firebase\";\nimport { sessionActions } from \"../redux/actions\";\nimport { bindActionCreators } from \"redux\";\nimport LogInNavigator from \"./LogInNavigator\";\nimport ContentNavigator from \"./ContentNavigator\";\n\nexport class index extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.props.signIn({ user });\n      }\n    });\n  }\n\n  render() {\n    if (!this.props.isLogged) {\n      return (\n        <NavigationContainer\n          theme={this.props.colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n        >\n          <LoginNavigator />\n        </NavigationContainer>\n      );\n    }\n    return (\n      <NavigationContainer\n        theme={this.props.colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      >\n        <RootNavigator />\n      </NavigationContainer>\n    );\n  }\n}\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Content\" component={ContentNavigator} />\n    </Stack.Navigator>\n  );\n}\n\nconst mapStateToProps = (state: Object) => ({\n  isLogged: state.user.isLogged,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  let signIn = sessionActions.signIn;\n\n  return bindActionCreators({ signIn }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(index);\n","import { combineReducers } from \"redux\";\nimport { sessionActions } from \"./actions\";\nimport { SIGN_IN, SIGN_OUT } from \"./types\";\n\nconst userInitialState = {\n    isLogged: false,\n    userInfo: []\n};\n\nfunction signIn(state:Object, payload:Object) {\n    return {\n        ...state,\n        userInfo: payload.user,\n        isLogged: true,\n    }\n}\n\nfunction signOut(state:Object) {\n    return {\n        ...state,\n        user: [],\n        isLogged: false,\n    }\n}\n\nfunction userReducer(state:Object=userInitialState, action:Object) {\n    switch (action.type) {\n        case SIGN_IN:\n            state = signIn(state, action.payload);\n            return state;\n        \n        case SIGN_OUT:\n            state = signOut(state);\n            return state;\n\n        default:\n            return state;\n    }\n}\n\nlet reducers = combineReducers({user: userReducer});\n\nexport {reducers};","import { createStore } from \"redux\";\nimport { reducers } from \"./reducers\";\n\n\nlet store = createStore(reducers);\n\nexport default store;","import {\n  ApplicationProvider,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\n\nimport * as eva from \"@eva-design/eva\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\n\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nimport { firebaseConfig } from \"./constants/FirebaseCredentials\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\n\nfirebase.initializeApp(firebaseConfig);\n//firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE);\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n        <IconRegistry icons={EvaIconsPack} />\n        <ApplicationProvider {...eva} theme={eva.light}>\n          <SafeAreaProvider>\n            <Navigation colorScheme={colorScheme} />\n            <StatusBar />\n          </SafeAreaProvider>\n        </ApplicationProvider>\n      </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","export var firebaseConfig = {\n  apiKey: \"AIzaSyANF7HJeO4DsGg5OATcKuRe_NIP0AHClJA\",\n  authDomain: \"digital-backlog.firebaseapp.com\",\n  databaseURL: \"https://digital-backlog.firebaseio.com\",\n  projectId: \"digital-backlog\",\n  storageBucket: \"digital-backlog.appspot.com\",\n  messagingSenderId: \"909734181401\",\n  appId: \"1:909734181401:web:d2294e1ef2a5c2061b0888\"\n};\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}